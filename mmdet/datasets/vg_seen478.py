import numpy as np
from pycocotools.coco import COCO

from .custom import CustomDataset
from .registry import DATASETS


@DATASETS.register_module
class VGDatasetSeen478(CustomDataset):

    CLASSES = seen_class_name = (
        "rod",
        "silverware",
        "debris",
        "railing",
        "dish",
        "toothpick",
        "puddle",
        "weed",
        "tail",
        "device",
        "roadway",
        "woman",
        "string",
        "dessert",
        "blanket",
        "vase",
        "spoon",
        "fan",
        "artwork",
        "fireplace",
        "shoelace",
        "button",
        "magnet",
        "sand",
        "sidewalk",
        "stairway",
        "blade",
        "fence",
        "shaker",
        "horn",
        "bannister",
        "street",
        "acid",
        "blouse",
        "dial",
        "clock",
        "sun",
        "stool",
        "paddle",
        "uniform",
        "lampshade",
        "switch",
        "bird",
        "shoreline",
        "leg",
        "herd",
        "water",
        "beacon",
        "bookcase",
        "baseball",
        "sink",
        "trunk",
        "path",
        "smoke",
        "pillow",
        "apple",
        "heart",
        "straw",
        "jar",
        "minibike",
        "strap",
        "motor",
        "duck",
        "marker",
        "handlebar",
        "fireplug",
        "streetcar",
        "spoke",
        "sweater",
        "vehicle",
        "wiper",
        "blueberry",
        "calf",
        "pencil",
        "porch",
        "faucet",
        "glass",
        "flag",
        "train",
        "stick",
        "rubbish",
        "baby",
        "hole",
        "wool",
        "salad",
        "tunnel",
        "cap",
        "roof",
        "cat",
        "tag",
        "cab",
        "root",
        "control",
        "inscription",
        "earphone",
        "reflector",
        "lock",
        "drawer",
        "carrot",
        "pond",
        "airplane",
        "clothing",
        "lamb",
        "court",
        "dress",
        "machine",
        "lamp",
        "animal",
        "elephant",
        "tile",
        "gate",
        "toddler",
        "beach",
        "goat",
        "sandwich",
        "cupboard",
        "mat",
        "tattoo",
        "ashcan",
        "ladder",
        "wristwatch",
        "notebook",
        "tablecloth",
        "arch",
        "man",
        "tomato",
        "neck",
        "coat",
        "counter",
        "baggage",
        "shore",
        "truck",
        "necklace",
        "egg",
        "wing",
        "patio",
        "deck",
        "muffin",
        "meter",
        "paper",
        "costume",
        "oven",
        "keyboard",
        "windshield",
        "bunch",
        "monitor",
        "backpack",
        "mattress",
        "platform",
        "carton",
        "sauce",
        "apron",
        "food",
        "trail",
        "band",
        "giraffe",
        "foot",
        "bank",
        "headboard",
        "wagon",
        "meat",
        "arrow",
        "rock",
        "tray",
        "watchband",
        "hanger",
        "fish",
        "fixture",
        "logo",
        "girl",
        "monocle",
        "container",
        "pigeon",
        "dugout",
        "hill",
        "umbrella",
        "barrier",
        "dirt",
        "cockpit",
        "base",
        "cookie",
        "headband",
        "card",
        "log",
        "dishwasher",
        "skateboard",
        "cadmium",
        "bumper",
        "scarf",
        "urinal",
        "hook",
        "scissors",
        "ring",
        "hoof",
        "sheep",
        "sheet",
        "quilt",
        "jet",
        "spinach",
        "stack",
        "leash",
        "station",
        "banana",
        "cabin",
        "gear",
        "shelf",
        "tool",
        "park",
        "drain",
        "sign",
        "waist",
        "photograph",
        "bed",
        "shower",
        "dispenser",
        "bridge",
        "juice",
        "graffito",
        "seed",
        "pastry",
        "slab",
        "snow",
        "snout",
        "equipment",
        "visor",
        "track",
        "kickstand",
        "basket",
        "bridle",
        "moss",
        "handbag",
        "refrigerator",
        "armrest",
        "napkin",
        "cleat",
        "dog",
        "tooth",
        "bracket",
        "mustache",
        "pineapple",
        "barrel",
        "painting",
        "shop",
        "kite",
        "text",
        "stove",
        "crate",
        "bookshelf",
        "chandelier",
        "shoe",
        "hack",
        "chicken",
        "blender",
        "planter",
        "menu",
        "gull",
        "tape",
        "rice",
        "boulder",
        "plate",
        "handle",
        "watch",
        "television",
        "bear",
        "pocket",
        "bean",
        "beak",
        "hedge",
        "banner",
        "bat",
        "sleeve",
        "bag",
        "river",
        "steam",
        "art",
        "pane",
        "bucket",
        "frame",
        "vine",
        "seat",
        "computer",
        "driveway",
        "sea",
        "racket",
        "pebble",
        "arm",
        "barn",
        "wire",
        "burner",
        "label",
        "skyscraper",
        "tent",
        "screen",
        "dome",
        "guitar",
        "aircraft",
        "spectacles",
        "key",
        "kitchen",
        "toothbrush",
        "cow",
        "restaurant",
        "archway",
        "ramp",
        "doorway",
        "berry",
        "canopy",
        "bell",
        "wall",
        "pot",
        "pole",
        "church",
        "vessel",
        "table",
        "boat",
        "bathroom",
        "beer",
        "curtain",
        "feather",
        "engine",
        "mushroom",
        "bull",
        "bulb",
        "case",
        "rope",
        "bikini",
        "newspaper",
        "mound",
        "bin",
        "vest",
        "canoe",
        "brow",
        "telephone",
        "decoration",
        "tissue",
        "helmet",
        "shirt",
        "fender",
        "toaster",
        "bowl",
        "figurine",
        "vegetable",
        "pan",
        "mane",
        "wheel",
        "ball",
        "hosiery",
        "hand",
        "fruit",
        "cucumber",
        "statue",
        "footprint",
        "broccoli",
        "butter",
        "beanie",
        "noodle",
        "surfboard",
        "dock",
        "ocean",
        "concrete",
        "bottle",
        "awning",
        "drawing",
        "plaque",
        "bandanna",
        "background",
        "shadow",
        "sandal",
        "ham",
        "cup",
        "lake",
        "bench",
        "hay",
        "pile",
        "board",
        "bread",
        "ski",
        "knob",
        "branch",
        "traffic",
        "knot",
        "desk",
        # "doughnut",
        "pier",
        "furniture",
        "towel",
        "onion",
        "sofa",
        "pillar",
        "candy",
        "shutter",
        "garage",
        "pavement",
        "claw",
        "tower",
        "glare",
        "crowd",
        "doll",
        "trouser",
        "mirror",
        "billboard",
        "pasture",
        "battalion",
        "leaf",
        "shrub",
        "kettle",
        "microwave",
        "pen",
        "pea",
        "knife",
        "cord",
        "pepper",
        "booklet",
        "corn",
        "rug",
        "step",
        "pasta",
        "post",
        "panel",
        "plug",
        "socket",
        "package",
        "column",
        "island",
        "hinge",
        "magazine",
        "garbage",
        "saddle",
        "earring",
        "harness",
        "brush",
        "moped",
        "sunglasses",
        "stump",
        "van",
        "fabric",
        "buckle",
        "sock",
        "structure",
        "suit",
        "bubble",
        "fork",
        "jug",
        "catsup",
        "bus",
        "cabinet",
        "grate",
        "crane",
        "spice",
        "appliance",
        "strawberry",
        "trim",
        "ad",
        "pie",
        "curb",
        "candle",
        "ship",
        "sweatshirt",
        "lemon",
        "antenna",
        "boot",
        "book",
        "oar",
        "ledge",
        "ponytail",
        "picture",
        "frisbee",
        "star",
        "symbol",
        "pear",
        "lens",
        "apparel",
        "foil",
        "pool",
        "cliff",
        "potato",
        "jacket",
        "beverage",
        "bleacher"
)

    def load_annotations(self, ann_file):
        self.coco = COCO(ann_file)
        self.cat_ids = self.coco.getCatIds()
        self.cat2label = {
            cat_id: i + 1
            for i, cat_id in enumerate(self.cat_ids)
        }
        self.img_ids = self.coco.getImgIds()
        img_infos = []
        for i in self.img_ids:
            info = self.coco.loadImgs([i])[0]
            info['filename'] = info['file_name']
            img_infos.append(info)
        return img_infos

    def get_ann_info(self, idx):
        img_id = self.img_infos[idx]['id']
        ann_ids = self.coco.getAnnIds(imgIds=[img_id])
        ann_info = self.coco.loadAnns(ann_ids)
        return self._parse_ann_info(self.img_infos[idx], ann_info)

    def _filter_imgs(self, min_size=32):
        """Filter images too small or without ground truths."""
        valid_inds = []
        ids_with_ann = set(_['image_id'] for _ in self.coco.anns.values())
        for i, img_info in enumerate(self.img_infos):
            if self.img_ids[i] not in ids_with_ann:
                continue
            if min(img_info['width'], img_info['height']) >= min_size:
                valid_inds.append(i)
        return valid_inds

    def _parse_ann_info(self, img_info, ann_info):
        """Parse bbox and mask annotation.

        Args:
            ann_info (list[dict]): Annotation info of an image.
            with_mask (bool): Whether to parse mask annotations.

        Returns:
            dict: A dict containing the following keys: bboxes, bboxes_ignore,
                labels, masks, seg_map. "masks" are raw annotations and not
                decoded into binary masks.
        """
        gt_bboxes = []
        gt_labels = []
        gt_bboxes_ignore = []
        gt_masks_ann = []

        for i, ann in enumerate(ann_info):
            if ann.get('ignore', False):
                continue
            x1, y1, w, h = ann['bbox']
            if ann['area'] <= 0 or w < 1 or h < 1:
                continue
            bbox = [x1, y1, x1 + w - 1, y1 + h - 1]
            if ann.get('iscrowd', False):
                gt_bboxes_ignore.append(bbox)
            else:
                gt_bboxes.append(bbox)
                gt_labels.append(self.cat2label[ann['category_id']])
                gt_masks_ann.append(ann['segmentation'])

        if gt_bboxes:
            gt_bboxes = np.array(gt_bboxes, dtype=np.float32)
            gt_labels = np.array(gt_labels, dtype=np.int64)
        else:
            gt_bboxes = np.zeros((0, 4), dtype=np.float32)
            gt_labels = np.array([], dtype=np.int64)

        if gt_bboxes_ignore:
            gt_bboxes_ignore = np.array(gt_bboxes_ignore, dtype=np.float32)
        else:
            gt_bboxes_ignore = np.zeros((0, 4), dtype=np.float32)

        seg_map = img_info['filename'].replace('jpg', 'png')

        ann = dict(
            bboxes=gt_bboxes,
            labels=gt_labels,
            bboxes_ignore=gt_bboxes_ignore,
            masks=gt_masks_ann,
            seg_map=seg_map)

        return ann
